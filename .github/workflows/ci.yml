name: CI

on:
  release:
    types: [published]
  push:
    branches:
       - main
    tags:
      - test-artifacts*
  pull_request:
    branches:
      - main
  package_ubuntu_cli:
    name: "Package cli for Ubuntu"
    runs-on: ubuntu-22.04
    steps:
      - name: cancel running workflows
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v1
      - name: Install build essentials
        run: sudo apt-get -y install build-essential
      - name: setup python
        uses: actions/setup-python@v4.5.0
        with:
          python-version: 3.10.6
      - name: Install pipenv
        run: |
          pip install pipenv==2023.7.23
          cd node-runner-cli/
          pipenv install
          pipenv run pip install pytest pytest-cov
          pipenv run pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml --cov-report=html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.6.1
        if: always()
        with:
          files: |
            /home/runner/work/babylon-nodecli/babylon-nodecli/node-runner-cli/junit/test-results.xml 
            test-results/**/*.xml
            test-results/**/*.trx
            test-results/**/*.json
            junit/**/*.xml
            junit/*.xml
            node-runner-cli/junit/**/*.xml
            junit/*.xml
            **/junit/test-results.xml
      - if: ${{ github.event_name == 'pull_request' }}
        name: Get Cover 
        uses: orgoro/coverage@v3
        with:
          coverageFile: node-runner-cli/coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the binary for ubuntu jammy
        run: |
          cd node-runner-cli
          make output-ubuntu-jammy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Upload generated cli file"
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ubuntu 22.04
          path: "${{ github.workspace }}/node-runner-cli/out/ubuntu/jammy/babylonnode"
      - name: Build the binary for ubuntu focal
        run: |
          cd node-runner-cli
          make output-ubuntu-focal
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Upload generated cli file"
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ubuntu 20.04
          path: "${{ github.workspace }}/node-runner-cli/out/ubuntu/focal/babylonnode"

  upload-asset-store:
    environment: AWS_ARTIFACT
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'push' }}
    needs:
      - package_ubuntu_cli
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0
      - name: set branchname with commit
        run: |
          ls -l
          BRANCH_NAME_WITH_HYPENS=$(echo ${GITHUB_REF##*/} | sed 's/\//-/g')
          COMMIT=$(git log -1 --format=%h )
          BRANCH_WITH_COMMIT=$BRANCH_NAME_WITH_HYPENS-$COMMIT
          echo "BRANCH_WITH_COMMIT=$BRANCH_WITH_COMMIT" >> $GITHUB_ENV
      - name: Configure AWS Region
        run: echo "AWS_DEFAULT_REGION=eu-west-1" >> $GITHUB_ENV
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef
        with:
          role-to-assume: arn:aws:iam::${{secrets.ARTIFACT_AWS_ACCOUNT_ID }}:role/gh-asset-store-deployer
          aws-region: eu-west-1
      - name: Download packaged cli
        uses: actions/download-artifact@v3
        with:
          name: ubuntu 22.04
      - name: Upload cli to asset store
        run: |
          ls */**
          aws s3 cp babylonnode s3://${{secrets.ARTIFACT_AWS_BUCKET }}/babylonnode/${{env.BRANCH_WITH_COMMIT}}/babylonnode-ubuntu-22.04

  upload-release-jammy:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'release' }}
    needs:
      - package_ubuntu_cli
    steps:
      - name: Download packaged cli
        uses: actions/download-artifact@v3
        with:
          name: ubuntu 22.04
      - name: Upload radixcli ubuntu binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./babylonnode
          asset_name: babylonnode-ubuntu-22.04
          asset_content_type: application/octet-stream
        if: ${{ github.event_name == 'release' }}

  upload-release-focal:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'release' }}
    needs:
      - package_ubuntu_cli
    steps:
      - name: Download packaged cli
        uses: actions/download-artifact@v3
        with:
          name: ubuntu 20.04
      - name: Upload radixcli ubuntu binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./babylonnode
          asset_name: babylonnode-ubuntu-20.04
          asset_content_type: application/octet-stream
        if: ${{ github.event_name == 'release' }}

  test-systemd:
    runs-on: [node-only]
    needs:
      - package_ubuntu_cli
    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0
      - name: Download packaged cli
        uses: actions/download-artifact@v3
        with:
          name: ubuntu 22.04
      - name: Get dependencies
        run: |
          chmod +x ./babylonnode
          sudo apt-get update
          sudo apt-get install containerd runc
      - name: Run systemd dependencies
        run: |
          ls -a
          chmod +x ./babylonnode
          # ./babylonnode systemd dependencies
          echo "expecting the dependencies to be already installed"
      - name: Run systemd config
        run: |
          ls -a
          chmod +x ./babylonnode
          echo "HOME=$HOME"
          echo "PATH=$PWD"
          ./babylonnode systemd config -m CORE \
            -n 13 \
            -t radix://node_tdx_d_1qwq2nfe6vxqwe3mqmfm9l2xl97as7lkwndval63cymvc3qszn8nqx6g2s3m@3.109.161.178 \
            -i 35.178.142.54 \
            -v "not_a_real_validator_address" \
            -k $KEYSTORE_PASSWORD -nk -a \
            -dd $HOME/babylon-ledger
          ./babylonnode systemd stop && sudo rm -rf $HOME/babylon-ledger
        env:
          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run systemd install
        run: |
          ls -a
          chmod +x ./babylonnode
          echo "HOME=$HOME"
          echo "PATH=$PWD"
          ./babylonnode systemd install -a
      - name: Get Logs and Status
        run: |
          sleep 15
          sudo tail /var/log/syslog  -n 100
          ./babylonnode auth set-admin-password --setupmode SYSTEMD -p $NGINX_ADMIN_PASSWORD
          ./babylonnode auth set-superadmin-password --setupmode SYSTEMD -p $NGINX_SUPERADMIN_PASSWORD
          ./babylonnode auth set-metrics-password --setupmode SYSTEMD -p $NGINX_METRICS_PASSWORD
          NGINX_ADMIN_PASSWORD=$NGINX_ADMIN_PASSWORD ./babylonnode api system health
          NGINX_ADMIN_PASSWORD=$NGINX_ADMIN_PASSWORD ./babylonnode api system version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NGINX_ADMIN_PASSWORD: ${{secrets.NGINX_ADMIN_PASSWORD}}
          NGINX_METRICS_PASSWORD: ${{secrets.NGINX_METRICS_PASSWORD}}
          NGINX_SUPERADMIN_PASSWORD: ${{secrets.NGINX_SUPERADMIN_PASSWORD}}
      - name: Stop systemd 
        run: |
          chmod +x ./babylonnode
          echo "HOME=$HOME"
          echo "PATH=$PWD"
          ./babylonnode systemd stop   
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-config-command:
    runs-on: ubuntu-22.04
    needs:
      - package_ubuntu_cli
    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0
      - name: Download packaged cli
        uses: actions/download-artifact@v3
        with:
          name: ubuntu 22.04
      - name: Get dependencies
        run: |
          chmod +x ./babylonnode
          sudo apt-get update
          sudo apt-get install containerd runc
          ./babylonnode docker dependencies
      - name: core-gateway-all-local
        run: |
          ls -a
          chmod +x ./babylonnode
          mkdir -p $HOME/node-config
          echo "HOME=$HOME"
          echo "PATH=$PWD"
          export PROMPT_FEEDS="node-runner-cli/test-prompts/core-gateway-all-local.yml"
          ./babylonnode docker config -m DETAILED \
           -d $HOME/node-config \
           -k $KEYSTORE_PASSWORD -nk -a
        env:
          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
          RADIXDLT_APP_VERSION_OVERRIDE: "1.3.2"
          RADIXDLT_GATEWAY_VERSION_OVERRIDE: "0.0.1-rc1"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: corenode-01
        run: |
          ls -a
          chmod +x ./babylonnode
          export PROMPT_FEEDS="node-runner-cli/test-prompts/corenode-01.yml"
          ./babylonnode docker config -m DETAILED \
           -d $HOME/node-config \
           -k $KEYSTORE_PASSWORD -nk -a
        env:
          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
          RADIXDLT_APP_VERSION_OVERRIDE: "1.3.2"
          RADIXDLT_GATEWAY_VERSION_OVERRIDE: "0.0.1-rc1"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: corenode-02
        run: |
          ls -a
          export PROMPT_FEEDS="node-runner-cli/test-prompts/corenode-02.yml"
          ./babylonnode docker config -m DETAILED \
           -d $HOME/node-config \
           -k $KEYSTORE_PASSWORD -nk -a
        env:
          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
          RADIXDLT_APP_VERSION_OVERRIDE: "1.3.2"
          RADIXDLT_GATEWAY_VERSION_OVERRIDE: "0.0.1-rc1"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      Enable below tests when gateway support is implemented
#      - name: gateway-remote-core-local-postgress
#        run: |
#          ls -a
#          export PROMPT_FEEDS="node-runner-cli/test-prompts/gateway-remote-core-local-postgress.yml"
#          ./babylonnode docker config -m DETAILED \
#           -d $HOME/node-config \
#           -k $KEYSTORE_PASSWORD -nk -a
#        env:
#          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
#          RADIXDLT_APP_VERSION_OVERRIDE: "1.3.2"
#          RADIXDLT_GATEWAY_VERSION_OVERRIDE: "0.0.1-rc1"
#      - name: gateway-remote-core-remote-postgress
#        run: |
#          ls -a
#          export PROMPT_FEEDS="node-runner-cli/test-prompts/gateway-remote-core-remote-postgress.yml"
#          ./babylonnode docker config -m DETAILED \
#           -d $HOME/node-config \
#           -k $KEYSTORE_PASSWORD -nk -a
#        env:
#          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
#          RADIXDLT_APP_VERSION_OVERRIDE: "1.3.2"
#          RADIXDLT_GATEWAY_VERSION_OVERRIDE: "0.0.1-rc1"

  test-core-only-node:
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      pull-requests: read
      contents: read
    needs:
      - package_ubuntu_cli
    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0
      - name: Download packaged cli
        uses: actions/download-artifact@v3
        with:
          name: ubuntu 22.04
      - name: Run configure command
        run: |
          chmod +x ./babylonnode
          sudo apt-get update
          sudo apt-get install containerd runc
          ./babylonnode docker dependencies
      - name: Setup config
        run: |
          chmod +x ./babylonnode
          mkdir -p $HOME/babylon-node-config
          export DISABLE_VERSION_CHECK=true
          export RADIXDLT_APP_VERSION_OVERRIDE="rcnet-v2-phase2-r4"
          export DOCKER_COMPOSE_LOCATION="/usr/local/bin/docker-compose"
          export PROMPT_FEEDS="node-runner-cli/test-prompts/core-gateway-all-local.yml"
          ./babylonnode docker config -m DETAILED \
           -d $HOME/babylon-node-config \
           -k $KEYSTORE_PASSWORD -nk -a
        env:
          KEYSTORE_PASSWORD: ${{secrets.KEYSTORE_PASSWORD}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run CLI setup
        run: |
          export DISABLE_VERSION_CHECK=true
          export DOCKER_COMPOSE_LOCATION="/usr/local/bin/docker-compose"
          ./babylonnode docker install -f $HOME/babylon-node-config/config.yaml -a
          # ToDo: Fix Authorization error export DOCKER_COMPOSE_FOLDER_PREFIX=runner ?
          sleep 60
          ./babylonnode auth set-admin-password -m DOCKER -p $NGINX_ADMIN_PASSWORD
          ./babylonnode auth set-metrics-password -m DOCKER -p $NGINX_METRICS_PASSWORD
          ./babylonnode auth set-superadmin-password -m DOCKER -p $NGINX_SUPERADMIN_PASSWORD
          NGINX_ADMIN_PASSWORD=$NGINX_ADMIN_PASSWORD ./babylonnode api system health
          NGINX_ADMIN_PASSWORD=$NGINX_ADMIN_PASSWORD ./babylonnode api system version
        env:
          NGINX_ADMIN_PASSWORD: ${{secrets.NGINX_ADMIN_PASSWORD}}
          NGINX_METRICS_PASSWORD: ${{secrets.NGINX_METRICS_PASSWORD}}
          NGINX_SUPERADMIN_PASSWORD: ${{secrets.NGINX_SUPERADMIN_PASSWORD}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Monitoring setup
        run: |
          export DOCKER_COMPOSE_LOCATION="/usr/local/bin/docker-compose"
          ./babylonnode monitoring config \
                        -m MONITOR_CORE  \
                        -cm $NGINX_METRICS_PASSWORD  \
                        -gm $NGINX_METRICS_PASSWORD  \
                        -am $NGINX_METRICS_PASSWORD
          ./babylonnode monitoring install -a

        env:
          NGINX_ADMIN_PASSWORD: ${{secrets.NGINX_ADMIN_PASSWORD}}
          NGINX_METRICS_PASSWORD: ${{secrets.NGINX_METRICS_PASSWORD}}
          NGINX_SUPERADMIN_PASSWORD: ${{secrets.NGINX_SUPERADMIN_PASSWORD}}

