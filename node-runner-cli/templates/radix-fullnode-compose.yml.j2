# WARNING!! This file is automatically generated and it is
# overriden when on install/update commands.
# Please consider re-running config/install commands rather
# than manually edit this file

version: '3.8'
services:
{% if core_node is not none and core_node is defined %}
  core:
    cap_add:
    - NET_ADMIN
    {% if core_node.advanced_user_envs is defined and core_node.advanced_user_envs is not none %}
    env_file:
      - {{core_node.advanced_user_envs}}
    {% endif %} 
    environment:
      JAVA_OPTS: {{core_node.java_opts or '--enable-preview -server  -XX:MaxDirectMemorySize=2048m -XX:+HeapDumpOnOutOfMemoryError -XX:+UseCompressedOops -Djavax.net.ssl.trustStore=/etc/ssl/certs/java/cacerts -Djavax.net.ssl.trustStoreType=jks -Djava.security.egd=file:/dev/urandom -DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector'}}
      RADIXDLT_CORE_API_PORT: {{core_node.core_api_port}}
      RADIXDLT_SYSTEM_API_PORT: {{core_node.system_api_port}}
      RADIXDLT_LOG_LEVEL: {{core_node.log_level or 'info'}}
      RADIXDLT_NETWORK_ID: {{common_config.network_id}}
      RADIXDLT_NETWORK_SEEDS_REMOTE: {{core_node.trusted_node}}
      RADIXDLT_NETWORK_USE_PROXY_PROTOCOL: '{{core_node.use_proxy_protocol or 'false'}}'
      RADIXDLT_VALIDATOR_KEY_LOCATION: /home/radixdlt/babylon-node-config/node-keystore.ks
      RADIXDLT_NODE_KEY_CREATE_IF_MISSING: true
      RADIX_NODE_KEYSTORE_PASSWORD: '{{core_node.keydetails.keystore_password}}'
      {% if migration.use_olympia is defined %}
      {% if migration.use_olympia %}
      RADIXDLT_GENESIS_USE_OLYMPIA: '{{migration.use_olympia}}'
      RADIXDLT_GENESIS_OLYMPIA_NODE_END_STATE_API_URL: '{{migration.olympia_node_url}}'
      RADIXDLT_GENESIS_OLYMPIA_NODE_END_STATE_API_AUTH_USER: '{{migration.olympia_node_auth_user}}'
      RADIXDLT_GENESIS_OLYMPIA_NODE_END_STATE_API_AUTH_PASSWORD: '{{migration.olympia_node_auth_password}}'
      RADIXDLT_GENESIS_OLYMPIA_NODE_BECH32_ADDRESS: '{{migration.olympia_node_bech32_address}}'
      {% endif %}
      {% endif %}
      {% if common_config.genesis_bin_data_file is defined and common_config.genesis_bin_data_file|length%}
      RADIXDLT_GENESIS_DATA_FILE: "/home/radixdlt/genesis_data_file.bin"
      {% endif %}
      {% if core_node.validator_address is defined %}
      RADIXDLT_CONSENSUS_VALIDATOR_ADDRESS: '{{core_node.validator_address}}'
      {% endif %}
      RADIXDLT_ENGINE_STATE_API_PORT: {{core_node.engine_state_api_port}}
      RADIXDLT_ENGINE_STATE_API_BIND_ADDRESS: {{core_node.engine_state_api_address}}
    image: {{core_node.repo}}:{{core_node.core_release}}
    init: true
    mem_limit: {{core_node.memory_limit or '14000m'}}
    restart: unless-stopped
    {% if common_config.nginx_settings is not defined or (common_config.nginx_settings.protect_core | lower | trim) == "false" %}
    ports:
       - "3333:3333"
       - "3334:3334"
       - "30000:30000"
    {% endif %}
    ulimits:
      memlock: -1
      nofile:
        hard: 65536
        soft: 65536
    volumes:
    {% if core_node.data_directory is defined %}
    - babylon_ledger:/home/radixdlt/RADIXDB
    {% endif %}
    - {{core_node.keydetails.keyfile_path ~ '/' }}:/home/radixdlt/babylon-node-config/
    {% if common_config.genesis_bin_data_file is defined and common_config.genesis_bin_data_file|length %}
    - "{{common_config.genesis_bin_data_file}}:/home/radixdlt/genesis_data_file.bin"
    {% endif %}
 {% endif %}
 {% if common_config.nginx_settings is defined  and  ((common_config.nginx_settings.protect_core | lower | trim) == "true" or ((common_config.nginx_settings.protect_gateway | lower | trim) == "true" and (gateway.enabled | lower | trim) == "true")) %}
  nginx:
    environment:
    {% if core_node is defined %}
      RADIXDLT_NETWORK_USE_PROXY_PROTOCOL: '{{core_node.use_proxy_protocol or 'false'}}'
      RADIXDLT_CORE_API_PORT: '{{core_node.core_api_port}}'
      RADIXDLT_SYSTEM_API_PORT: '{{core_node.system_api_port}}'
    {% endif %}
    {% if core_node is not defined or core_node is none %}
      RADIXDLT_ENABLE_TCP_CORE_PROXY: 'false'
    {% endif %}
      RADIXDLT_GATEWAY_API_ENABLE: '{{common_config.nginx_settings.protect_gateway or 'false'}}'
      RADIXDLT_GATEWAY_BEHIND_AUTH: '{{common_config.nginx_settings.gateway_behind_auth or 'false'}}'
    {% if core_node is not none and core_node is defined %}
      RADIXDLT_ENGINE_STATE_ENABLE: '{{core_node.engine_state_enabled or 'false'}}'
      RADIXDLT_engine_state_api_port: '{{core_node.engine_state_api_port}}'
    {% endif %}
    image: {{common_config.nginx_settings.repo}}:{{common_config.nginx_settings.release}}
    ports:
    - 443:443
    - 30000:30000
    restart: unless-stopped
    ulimits:
      nofile:
        hard: 65536
        soft: 65536
    volumes:
    - nginx_secrets:/etc/nginx/secrets
 {% endif %}
{% if (gateway.enabled and gateway.gateway_api is defined) %}
  gateway_api: # This is the base -- the _image and _built containers are defined below
    image: {{gateway.gateway_api.repo}}:{{gateway.gateway_api.release}}
    ports:
      - "127.0.0.1:{{gateway.gateway_api.applicationPortHostBinding or '5207'}}:80" # This allows you to connect to the API at http://localhost:5308
      - "127.0.0.1:{{gateway.gateway_api.prometheusMetricsPortHostBinding or '1235' }}:1235" # This allows you to connect to the metrics API at http://localhost:1235
    restart: {{gateway.gateway_api.restart or 'unless-stopped'}}
{% if (gateway.postgres_db is defined and gateway.postgres_db.setup == 'local') %}
    extra_hosts:
    - "host.docker.internal:host-gateway"
{% endif %}
    environment:
      ASPNETCORE_URLS: "http://*:80" # Binds to 80 on all interfaces
      PrometheusMetricsPort: "{{gateway.gateway_api.prometheusMetricsPortHostBinding or '1235' }}"
      EnableSwagger: "{{gateway.gateway_api.enable_swagger or 'false'}}"
      ConnectionStrings__NetworkGatewayReadOnly: "Host={{gateway.postgres_db.host}};Database={{gateway.postgres_db.dbname}};Username={{gateway.postgres_db.user}};Password={{gateway.postgres_db.password}}"
      ConnectionStrings__NetworkGatewayReadWrite: "Host={{gateway.postgres_db.host}};Database={{gateway.postgres_db.dbname}};Username={{gateway.postgres_db.user}};Password={{gateway.postgres_db.password}}"
      GatewayApi__Endpoints_MaxPageSize: "{{gateway.gateway_api.max_page_size or '30'}}"
      # GatewayApi__MaxWaitForDbOnStartupMs: "90" # Wait for PostGres to boot up
      GatewayApi__Network__DisableCoreApiHttpsCertificateChecks: "{{gateway.gateway_api.coreApiNode.disable_core_api_https_certificate_checks or 'false'}}"
      GatewayApi__Network__NetworkName: "{{common_config.network_name}}"
      GatewayApi__Network__CoreApiNodes__0__Name: "{{gateway.gateway_api.coreApiNode.Name}}"
      GatewayApi__Network__CoreApiNodes__0__CoreApiAddress: "{{gateway.gateway_api.coreApiNode.core_api_address}}"
      {% if gateway.gateway_api.coreApiNode.auth_header is defined %}
      GatewayApi__Network__CoreApiNodes__0__CoreApiAuthorizationHeader: "{{gateway.data_aggregator.coreApiNode.auth_header.Authorization}}"
      {% endif %}
      GatewayApi__Network__CoreApiNodes__0__RequestWeighting: "{{gateway.gateway_api.coreApiNode.request_weighting or '1'}}"
      GatewayApi__Network__CoreApiNodes__0__Enabled: "{{gateway.gateway_api.coreApiNode.enabled or 'true'}}"
{% endif %}
{% if (gateway.enabled and gateway.data_aggregator is defined) %}
  data_aggregator:
    depends_on:
      - database_migrations
    image: {{gateway.data_aggregator.repo}}:{{gateway.data_aggregator.release}}
    restart: {{gateway.data_aggregator.restart or 'unless-stopped'}}
    cpus: {{gateway.data_aggregator.cpus or '2.0'}}
{% if (gateway.postgres_db is defined and gateway.postgres_db.setup == 'local') %}
    extra_hosts:
    - "host.docker.internal:host-gateway"
{% endif %}
    ports:
      - "127.0.0.1:{{gateway.data_aggregator.applicationPortHostBinding or '5208'}}:80" # This allows you to connect to the API (for root and health checks) at http://localhost:5207
      - "127.0.0.1:{{gateway.data_aggregator.prometheusMetricsPortHostBinding or '1234'}}:1234" # This allows you to connect to the metrics API at http://localhost:1234
    environment:
      # WIPE_DATABASE: "true"
      ASPNETCORE_URLS: "http://*:80" # Binds to 80 on all interfaces
      ConnectionStrings__NetworkGatewayReadWrite: "Host={{gateway.postgres_db.host}};Database={{gateway.postgres_db.dbname}};Username={{gateway.postgres_db.user}};Password={{gateway.postgres_db.password}}"
      PrometheusMetricsPort: "{{gateway.data_aggregator.prometheusMetricsPortHostBinding or '1234'}}"
      #DataAggregator__Network__MaxWaitForDbOnStartupMs: "90"
      DataAggregator__Network__DisableCoreApiHttpsCertificateChecks:  "{{gateway.data_aggregator.coreApiNode.disable_core_api_https_certificate_checks or 'false'}}"
      DataAggregator__Network__NetworkName: "{{common_config.network_name}}"
      DataAggregator__Network__CoreApiNodes__0__Name: "{{gateway.data_aggregator.coreApiNode.Name}}"
      DataAggregator__Network__CoreApiNodes__0__CoreApiAddress: "{{gateway.data_aggregator.coreApiNode.core_api_address}}"
      {% if gateway.data_aggregator.coreApiNode.auth_header is defined %}
      DataAggregator__Network__CoreApiNodes__0__CoreApiAuthorizationHeader: "{{gateway.data_aggregator.coreApiNode.auth_header.Authorization}}"
      {% endif %}
      DataAggregator__Network__CoreApiNodes__0__TrustWeighting:  "{{gateway.data_aggregator.coreApiNode.trust_weighting or '1'}}"
      DataAggregator__Network__CoreApiNodes__0__Enabled:  "{{gateway.data_aggregator.coreApiNode.enabled or 'true'}}"
  database_migrations: # This is the base -- the _image and _built containers are defined below
    image: {{gateway.database_migration.repo}}:{{gateway.database_migration.release}}
    environment:
      ConnectionStrings__NetworkGatewayMigrations: Host={{gateway.postgres_db.host}};Database={{gateway.postgres_db.dbname}};Username={{gateway.postgres_db.user}};Password={{gateway.postgres_db.password}}
    {% if (gateway.postgres_db is defined and gateway.postgres_db.setup == 'local') %}
    extra_hosts:
    - "host.docker.internal:host-gateway"
    {% endif %}
{% endif %}
volumes:
 {% if core_node is defined and core_node.data_directory is defined %}
  babylon_ledger:
    driver: local
    driver_opts:
      device: {{ core_node.data_directory }}
      o: bind
      type: none
 {% endif %}
 {% if common_config.nginx_settings is defined  and  ((common_config.nginx_settings.protect_core | lower | trim) == "true" or ((common_config.nginx_settings.protect_gateway | lower | trim) == "true" and (gateway.enabled | lower | trim) == "true")) %}
  nginx_secrets:
 {% endif %}
