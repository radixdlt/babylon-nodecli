---
- hosts: localhost
  any_errors_fatal: true
  vars:
    huge_pages_setting: never
    swappiness_factor: 10
    cache_pressure_factor: 50
    swap_size: 8G
    setup_swap: false
    setup_limits: false
    postgres_local: false
    postgresql_version: 15
    postgresql_user: postgres
    postgresql_db_name: radixdlt_ledger
  tasks:
    - block:
        - name: Run whoami without become.
          command: whoami
          changed_when: false
          become: false
          register: whoami


        - name: configure system settings, file descriptors and number of threads
          pam_limits:
            domain: "{{whoami.stdout}}"
            limit_type: "{{item.limit_type}}"
            limit_item: "{{item.limit_item}}"
            value: "{{item.value}}"
          with_items:
            - { limit_type: '-', limit_item: 'nofile', value: 65536 }
            - { limit_type: '-', limit_item: 'nproc', value: 65536 }
            - { limit_type: 'soft', limit_item: 'memlock', value: unlimited }
            - { limit_type: 'hard', limit_item: 'memlock', value: unlimited }
        - name: reload settings from all system configuration files
          shell: sysctl --system
      tags: [ulimits]
      become: true
      when: setup_limits | bool

    - block:
      - name: check swapfile exists
        shell: |
          swapon --show | grep "/swapfile"
        register: swapfile
        changed_when: false
        ignore_errors: true


      - name: setup swap file
        shell: |
          fallocate -l {{swap_size}} /swapfile
          chmod 600 /swapfile
          mkswap /swapfile
          swapon /swapfile
          cp /etc/fstab /etc/fstab_{{ansible_date_time.iso8601_basic_short}}.bak
          echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          sysctl vm.swappiness={{swappiness_factor}}
          echo "vm.swappiness={{swappiness_factor}}" >> /etc/sysctl.conf
          sysctl vm.vfs_cache_pressure={{cache_pressure_factor}}
          echo "vm.vfs_cache_pressure={{cache_pressure_factor}}" >> /etc/sysctl.conf
        when: swapfile.stdout == ""

      become: true
      when: setup_swap | bool

    - block:
        - name: Ensure gpg is installed
          apt:
            name: gpg
        - name: Add repository signing key
          apt_key:
            url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
            state: present
        - name: Add postgresql repository
          apt_repository:
            repo: "deb https://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
            state: present
            filename: pgdg

        - name: Remove PostgreSQL 12 if installed
          ansible.builtin.package:
            name: postgresql-12
            state: absent
          ignore_errors: true
        
        - name: install PostgreSQL
          ansible.builtin.package:
            name:
              - postgresql-{{ postgresql_version }}
              - postgresql-client-{{ postgresql_version }}
              - postgresql-contrib-{{ postgresql_version }}
              - acl
            state: present

        - name: Debug print command pg_lsclusters
          command: pg_lsclusters
          register: pg_lsclusters_output
          changed_when: false

        - name: Print pg_lsclusters output
          debug:
            var: pg_lsclusters_output.stdout_lines

        - name: Remove PostgreSQL 12 cluster if exists
          shell: |
            pg_lsclusters | grep '12' && pg_dropcluster --stop 12 main
          ignore_errors: true

        - name: Check if PostgreSQL {{postgresql_version}} is listening on port 5432
          shell: |
            ss -ltn | grep ':5432'
          register: postgres_port_check
          changed_when: false
          ignore_errors: true

        - name: Stop PostgreSQL {{postgresql_version}} if it is running
          service:
            name: postgresql
            state: stopped
          when: postgres_port_check.stdout != ""

        - name: Modify PostgreSQL {{postgresql_version}} to listen on port 5432
          lineinfile:
            path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
            regexp: '^#?port ='
            line: 'port = 5432'
            state: present

        - name: Stop PostgreSQL service
          service:
            name: postgresql
            state: stopped


        - name: Reload systemd daemon
          command: systemctl daemon-reload

        - name: Start PostgreSQL {{postgresql_version}}
          service:
            name: postgresql
            state: started

        - name: Install psycopg2-binary python package
          ansible.builtin.pip:
            name: psycopg2-binary

        - name: change postgress password
          become: yes
          become_method: sudo
          become_user: "{{ postgresql_user }}"
          community.postgresql.postgresql_user:
            name: "{{ postgresql_user }}"
            password: "{{ postgress_password }}"

        - name: Grant
          community.postgresql.postgresql_pg_hba:
            dest: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
            contype: host
            users: all
            source: 0.0.0.0/0
            databases: all
            method: md5

        - name: Configure PostgreSQL. Set listen_addresses.
          lineinfile: dest=/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
            regexp="listen_addresses =" line="listen_addresses = '*'" state=present

        - name: Configure PostgreSQL. Set checkpoint timeout.
          lineinfile: dest=/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
            regexp="checkpoint_timeout =" line="checkpoint_timeout = 15min" state=present

        - name: Configure PostgreSQL. Set max_wal_size timeout.
          lineinfile: dest=/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
            regexp="max_wal_size =" line="max_wal_size = 10GB" state=present

        - name: restart postgresql
          service: name=postgresql state=restarted enabled=yes

        - name: Create the database specified in vars
          become: true
          become_user: "{{ postgresql_user }}"
          postgresql_db: name={{ postgresql_db_name }}
            template='template0'
            state=present

        - name: Ensure user has access to the new database
          become: true
          become_user: "{{ postgresql_user }}"
          postgresql_user: db={{ postgresql_db_name }}
            name={{ postgresql_user }}
            password={{ postgress_password }}
            priv=ALL
            state=present

      become: true
      when: postgres_local | bool
